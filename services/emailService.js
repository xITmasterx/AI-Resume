const nodemailer = require("nodemailer");

class EmailService {
  constructor() {
    this.transporter = null;
    this.initializeTransporter();
  }

  initializeTransporter() {
    try {
      this.transporter = nodemailer.createTransport({
        host: process.env.EMAIL_HOST || "smtp.gmail.com",
        port: parseInt(process.env.EMAIL_PORT) || 587,
        secure: process.env.EMAIL_SECURE === "true",
        auth: {
          user: process.env.EMAIL_USER,
          pass: process.env.EMAIL_PASS,
        },
      });
    } catch (error) {
      console.error("Failed to initialize email transporter:", error);
    }
  }

  async sendChatSummary(recipientEmail, resumeData, conversationHistory) {
    try {
      if (!this.transporter) {
        throw new Error("Email service not configured");
      }

      if (
        !process.env.EMAIL_USER ||
        process.env.EMAIL_USER === "your_email@gmail.com"
      ) {
        throw new Error("Email credentials not configured");
      }

      const htmlContent = this.generateEmailHTML(
        resumeData,
        conversationHistory
      );
      const textContent = this.generateEmailText(
        resumeData,
        conversationHistory
      );

      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: recipientEmail,
        subject: `Resume Chat Summary - ${
          resumeData?.sections?.contact?.name || "Unknown Candidate"
        }`,
        text: textContent,
        html: htmlContent,
      };

      const result = await this.transporter.sendMail(mailOptions);
      return { success: true, messageId: result.messageId };
    } catch (error) {
      console.error("Email sending error:", error);
      return { success: false, error: error.message };
    }
  }

  generateEmailHTML(resumeData, conversationHistory) {
    const candidateName =
      resumeData?.sections?.contact?.name || "Unknown Candidate";
    const timestamp = new Date().toLocaleString();

    let html = `
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .header { background-color: #f4f4f4; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
            .section { margin-bottom: 20px; }
            .conversation { background-color: #f9f9f9; padding: 15px; border-radius: 5px; margin-bottom: 10px; }
            .user-message { background-color: #e3f2fd; padding: 10px; margin: 5px 0; border-radius: 5px; }
            .bot-message { background-color: #f1f8e9; padding: 10px; margin: 5px 0; border-radius: 5px; }
            .resume-info { background-color: #fff3e0; padding: 15px; border-radius: 5px; }
            h2 { color: #2c3e50; }
            h3 { color: #34495e; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>Resume Chat Summary</h1>
            <p><strong>Candidate:</strong> ${candidateName}</p>
            <p><strong>Generated:</strong> ${timestamp}</p>
        </div>
    `;

    // Add resume summary
    if (resumeData) {
      html += `
        <div class="section">
            <h2>Resume Summary</h2>
            <div class="resume-info">
      `;

      if (resumeData.sections.contact.email) {
        html += `<p><strong>Email:</strong> ${resumeData.sections.contact.email}</p>`;
      }

      if (resumeData.sections.summary) {
        html += `<p><strong>Summary:</strong> ${resumeData.sections.summary}</p>`;
      }

      if (
        resumeData.sections.experience &&
        resumeData.sections.experience.length > 0
      ) {
        html += `<h3>Experience</h3><ul>`;
        resumeData.sections.experience.forEach((exp) => {
          html += `<li>${exp.title}</li>`;
        });
        html += `</ul>`;
      }

      if (resumeData.sections.skills && resumeData.sections.skills.length > 0) {
        html += `<p><strong>Skills:</strong> ${resumeData.sections.skills.join(
          ", "
        )}</p>`;
      }

      html += `
            </div>
        </div>
      `;
    }

    // Add conversation history
    if (conversationHistory && conversationHistory.length > 0) {
      html += `
        <div class="section">
            <h2>Conversation History</h2>
      `;

      conversationHistory.forEach((exchange, index) => {
        html += `
          <div class="conversation">
              <div class="user-message">
                  <strong>Question ${index + 1}:</strong> ${exchange.user}
              </div>
              <div class="bot-message">
                  <strong>Response:</strong> ${exchange.bot}
              </div>
          </div>
        `;
      });

      html += `</div>`;
    }

    html += `
        <div class="section">
            <p><em>This summary was generated by the Resume Chat Application.</em></p>
        </div>
    </body>
    </html>
    `;

    return html;
  }

  generateEmailText(resumeData, conversationHistory) {
    const candidateName =
      resumeData?.sections?.contact?.name || "Unknown Candidate";
    const timestamp = new Date().toLocaleString();

    let text = `RESUME CHAT SUMMARY\n`;
    text += `==================\n\n`;
    text += `Candidate: ${candidateName}\n`;
    text += `Generated: ${timestamp}\n\n`;

    // Add resume summary
    if (resumeData) {
      text += `RESUME SUMMARY\n`;
      text += `--------------\n`;

      if (resumeData.sections.contact.email) {
        text += `Email: ${resumeData.sections.contact.email}\n`;
      }

      if (resumeData.sections.summary) {
        text += `Summary: ${resumeData.sections.summary}\n`;
      }

      if (
        resumeData.sections.experience &&
        resumeData.sections.experience.length > 0
      ) {
        text += `\nExperience:\n`;
        resumeData.sections.experience.forEach((exp, index) => {
          text += `${index + 1}. ${exp.title}\n`;
        });
      }

      if (resumeData.sections.skills && resumeData.sections.skills.length > 0) {
        text += `\nSkills: ${resumeData.sections.skills.join(", ")}\n`;
      }

      text += `\n`;
    }

    // Add conversation history
    if (conversationHistory && conversationHistory.length > 0) {
      text += `CONVERSATION HISTORY\n`;
      text += `-------------------\n\n`;

      conversationHistory.forEach((exchange, index) => {
        text += `Question ${index + 1}: ${exchange.user}\n`;
        text += `Response: ${exchange.bot}\n\n`;
      });
    }

    text += `This summary was generated by the Resume Chat Application.\n`;

    return text;
  }

  async testConnection() {
    try {
      if (!this.transporter) {
        return { success: false, error: "Email service not configured" };
      }

      await this.transporter.verify();
      return { success: true, message: "Email service is ready" };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }
}

module.exports = EmailService;
